@inject Game GameContext

@if (Values != null)
{
    <div class="me-1 mb-1 d-flex flex-column rounded">
        <div class="mb-1 p-2 w-100 d-flex flex-row justify-content-between rounded text-bg-warning">
            <h3 class="m-0 p-0">Discard (@(Values.Count))</h3>
            @if (!Disabled)
            {
                <Button Class="py-0" Color="ButtonColor.Light" Disabled="@(Values.Count == 0)" @onclick="() => _showDetails = !_showDetails">
                    @if (_showDetails)
                    {
                        <span>Hide</span>
                    }
                    else
                    {
                        <span>Show</span>
                    }
                </Button>
            }
        </div>
        @if (_showDetails)
        {
            <div class="d-flex flex-row flex-wrap rounded">
                @foreach (var card in Values)
                {
                    <div class="me-1 mb-1 position-relative to-hover">
                        <GameCard CardContext="@card" />
                        <div class="w-100 h-100 position-absolute top-0 start-0 game-card" style="background-color: rgba(255, 193, 7, 0.5);"></div>
                        @if (!Disabled)
                        {
                            <div class="w-75 m-0 p-0 d-flex flex-row flex-wrap justify-content-center position-absolute top-50 start-50 translate-middle to-show">
                                @if (Values.Count > 0)
                                {
                                    <Button Class="m-1 p-1 rounded-circle btn-card" Type="ButtonType.Button" Color="ButtonColor.Success" Position="Position.Relative" @onclick="() => GameContext?.Actions.Take(card)">
                                        ↺
                                    </Button>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        }
        else
        {
            <div class="me-1 mb-1 position-relative to-hover">
                <GameCard CardContext="@Values.Last()" />
                <div class="w-100 h-100 position-absolute top-0 start-0 game-card" style="background-color: rgba(255, 193, 7, 0.5);"></div>
                @if (!Disabled)
                {
                    <div class="w-75 m-0 p-0 d-flex flex-row flex-wrap justify-content-center position-absolute top-50 start-50 translate-middle to-show">
                        @if (Values.Count > 0)
                        {
                            <Button Class="m-1 p-1 rounded-circle btn-card" Type="ButtonType.Button" Color="ButtonColor.Success" Position="Position.Relative" @onclick="() => GameContext?.Actions.Take(Values.Last())">
                                ↺
                            </Button>
                        }
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public IReadOnlyCollection<KingdomLegacy.Domain.Card>? Values { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    private bool _showDetails;
}
