<div class="me-1 mb-1 position-relative to-hover">
    @if (CardContext != null)
    {
        <Image Src="@("/cards/" + CardContext.Path)" Alt="@CardContext.Id.ToString()" Class="@CardClass" />
    }
    else
    {
        <div class="text-center pt-4 game-card">Empty</div>
    }
    @if (!string.IsNullOrEmpty(BackgroundColor))
    {
        <div class="w-100 h-100 position-absolute top-0 start-0 game-card opacity-50 @BackgroundColor" />
    }
    @if (!Disabled)
    {
        <div class="to-show">
            <div class="w-75 m-0 p-0 d-flex flex-row flex-wrap justify-content-center position-absolute top-50 start-50 translate-middle">
                @foreach (var action in Actions ?? CardActions)
                {
                    <ActionButton Class="m-1 p-1 rounded-circle btn-card" Position="Position.Relative" Action="@action" />
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public KingdomLegacy.Domain.Game? GameContext { get; set; }

    [Parameter]
    public KingdomLegacy.Domain.Card? CardContext { get; set; }

    [Parameter]
    public string? BackgroundColor { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public IAction[]? Actions { get; set; }

    private IAction[] CardActions => CardContext == null ? [] : GameContext?.Actions.GetCardActions(CardContext) ?? [];

    public string CardClass => $"game-card{(CardContext?.Orientation == Domain.Orientation.L2 || CardContext?.Orientation == Domain.Orientation.L3 ? " rotate-180" : "")}";
}
