@if (Values != null && Values.Count > 0)
{
    <div class="me-1 mb-1 d-flex flex-column rounded" @ondragend=OnDragEnd>
        <div class="mb-1 p-2 w-100 d-flex flex-row justify-content-between rounded @(BackgroundColor)">
            <h3 class="m-0 p-0">@(Name) (@(Values.Count))</h3>
            @if (IsCollapsed && Values.Count > 0)
            {
                <Button Class="py-0" Color="ButtonColor.Light" @onclick="() => _showDetails = !_showDetails">
                    @if (_showDetails)
                    {
                        <span>Hide</span>
                    }
                    else
                    {
                        <span>Show</span>
                    }
                </Button>
            }
        </div>
        @if (_showDetails)
        {
            <div class="d-flex flex-row flex-wrap rounded">
                @foreach (var card in Values)
                {
                    <div @ondragleave="() => OnDragLeave(card)" @ondragover="() => OnDragOver(card)">
                        <GameCard GameContext="@GameContext" CardContext="@card" BackgroundColor="@(Faded? BackgroundColor : "")" Disabled="@Disabled" />
                    </div>
                }
            </div>
        }
        else if (First != null)
        {
            <GameCard GameContext="@GameContext" CardContext="@First" BackgroundColor="@(Faded? BackgroundColor : "")" Disabled="@Disabled" />
        }
    </div>
}

@code {
    [Parameter]
    public string? Name { get; set; }

    [Parameter]
    public KingdomLegacy.Domain.Game? GameContext { get; set; }

    [Parameter]
    public IReadOnlyCollection<KingdomLegacy.Domain.Card>? Values { get; set; }
    private KingdomLegacy.Domain.Card? First => Values?.FirstOrDefault();

    [Parameter]
    public string? BackgroundColor { get; set; }

    [Parameter]
    public bool IsCollapsed { get; set; }
    private bool IsDraggable => !IsCollapsed;
    private bool Faded => IsCollapsed;

    [Parameter]
    public bool Disabled { get; set; }

    private bool _showDetails;

    override protected void OnParametersSet()
    {
        if (!IsCollapsed)
            _showDetails = true;

        base.OnParametersSet();
    }

    private KingdomLegacy.Domain.Card? _dragged;
    private void OnDragLeave(KingdomLegacy.Domain.Card card) =>
        _dragged = IsDraggable ? card : null;

    private void OnDragOver(KingdomLegacy.Domain.Card card) =>
        GameContext?.Swap(card, _dragged);

    private void OnDragEnd(DragEventArgs args) =>
        _dragged = null;
}
