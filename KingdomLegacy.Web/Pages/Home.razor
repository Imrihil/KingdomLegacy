@page "/"
@inject Game GameContext

<PageTitle>Kingdom Legacy</PageTitle>

@if (GameContext.IsInitialized)
{
    <div class="d-flex flex-row flex-wrap">
        <div class="me-1 mb-1 d-flex flex-column rounded" style="width: 130px;">
            <h3 class="mb-1 p-2 rounded text-bg-dark">Box (@(GameContext.BoxCount))</h3>
            @foreach (var action in GameContext.Actions.GetBoxActions())
            {
                <ActionButton Class="m-1 p-1" Action="@action" />
            }
            <div class="d-flex d-row">
                <NumberInput Style="width: 70px;" TValue="int" @bind-Value="@_boxCardId" />
                @foreach (var action in GameContext.Actions.GetBoxSpecialActions(_boxCardId))
                {
                    <ActionButton Class="m-1 p-1 w-100" Action="@action" />
                }
            </div>
        </div>
        <Cards Name="Permanent" GameContext="@GameContext" Values="@GameContext.Permanent" BackgroundColor="text-bg-light" />
        <Cards Name="Discover" GameContext="@GameContext" Values="@GameContext.Discovered" BackgroundColor="text-bg-info" />
        <Cards Name="Deck" GameContext="@GameContext" Values="@GameContext.Deck" BackgroundColor="text-bg-primary" IsCollapsed="true" Disabled="@(GameContext.DiscoveredCount > 0)" EmptyActions="@GameContext.Actions.GetDeckActions()" />
        <Cards Name="In play" GameContext="@GameContext" Values="@GameContext.InPlay" BackgroundColor="text-bg-secondary" Disabled="@(GameContext.DiscoveredCount > 0)" />
        <Cards Name="Hand" GameContext="@GameContext" Values="@GameContext.Hand" BackgroundColor="text-bg-success" Disabled="@(GameContext.DiscoveredCount > 0)" />
        <Cards Name="Discard" GameContext="@GameContext" Values="@GameContext.Discarded" BackgroundColor="text-bg-warning" IsCollapsed="true" Disabled="@(GameContext.DiscoveredCount > 0)" />
        <Cards Name="Trash" GameContext="@GameContext" Values="@GameContext.Trashed" BackgroundColor="text-bg-danger" IsCollapsed="true" Disabled="@(GameContext.DiscoveredCount > 0)" />
    </div>
    <ul class="list-group">
        @foreach (var action in GameContext.Actions.History.Reverse().Where(action => action.Description != null).Take(25))
        {
            <li class="list-group-item">@action.Description</li>
        }
    </ul>
}
else if (_name == null)
{
    <lead>What do you want to do?</lead>

    <div class="d-flex flex-column mb-3">
        <InputFile class="m-2 btn btn-primary" title="Load game" OnChange="LoadGame" accept=".save" />
        <Button Class="m-2" Type="ButtonType.Link" Color="ButtonColor.Primary" @onclick=NewGame>New game</Button>
    </div>
}
else
{
    <lead>Name your kingdom</lead>

    <div class="d-flex flex-column mb-3">
        <TextInput Class="m-2" @bind-Value="@_name" />
        <Button Class="m-2" Type="ButtonType.Link" Color="ButtonColor.Primary" @onclick="StartGame">Start</Button>
    </div>
}

@code {
    private int _boxCardId;
    private bool _showDeck;
    private bool _showTrashed;

    private string? _name;

    protected override void OnInitialized()
    {
        GameContext.Subscribe(_ => StateHasChanged());
        base.OnInitialized();
    }

    private async Task LoadGame(InputFileChangeEventArgs args)
    {
        MemoryStream stream = new MemoryStream();
        await args.File.OpenReadStream().CopyToAsync(stream);
        var bytes = stream.ToArray();
        var data = Encoding.Default.GetString(bytes);
        GameContext.Load(data);
    }

    private void NewGame(MouseEventArgs args) =>
        _name = "";

    private void StartGame(MouseEventArgs args) =>
        GameContext.Initialize(_name, Expansions.FeudalKingdom);
}