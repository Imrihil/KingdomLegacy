@page "/"

@inject Game GameContext

<PageTitle>Kingdom Legacy</PageTitle>

@if (GameContext.IsInitialized)
{
    <div class="d-flex flex-row flex-wrap">
        <div class="me-1 mb-1 d-flex flex-column rounded">
            <h3 class="p-2 rounded text-bg-dark">Box (<span>@GameContext.BoxCount</span>)</h3>
            @if (GameContext.BoxCount >= 1)
            {
                <Button class="m-1 p-1" Type="ButtonType.Button" Color="ButtonColor.Warning" @onclick="() => GameContext?.TakeFromBox()">
                    +1
                </Button>
            }
            @if (GameContext.BoxCount >= 2)
            {
                <Button class="m-1 p-1" Type="ButtonType.Button" Color="ButtonColor.Warning" @onclick="() => GameContext?.TakeFromBox(2)">
                    +2
                </Button>
            }
            @if (GameContext.BoxCount >= 5)
            {
                <Button class="m-1 p-1" Type="ButtonType.Button" Color="ButtonColor.Warning" @onclick="() => GameContext?.TakeFromBox(5)">
                    +5
                </Button>
            }
            @if (GameContext.BoxCount >= 10)
            {
                <Button class="m-1 p-1" Type="ButtonType.Button" Color="ButtonColor.Warning" @onclick="() => GameContext?.TakeFromBox(10)">
                    +10
                </Button>
            }
        </div>
        <div class="me-1 mb-1 d-flex flex-column rounded">
            <h3 class="p-2 rounded text-bg-primary">Deck (<span>@GameContext.DeckCount</span>)</h3>
            <div class="position-relative to-hover" id="deck">
                <GameCard CardContext="@GameContext.DeckTop" />
                <div class="w-100 h-100 position-absolute top-0 start-0" style="background-color: #404040A0;"></div>
                <div class="m-0 p-0 position-absolute top-50 start-50 translate-middle to-show">
                    @if (GameContext.DeckCount == 0)
                    {
                        <Button class="m-1 p-1 rounded-circle" Type="ButtonType.Button" Color="ButtonColor.Primary" Position="Position.Relative" @onclick="() => GameContext?.Reshuffle()">
                            ♺
                        </Button>
                    }
                    else
                    {
                        @if (GameContext.DeckCount >= 1)
                        {
                            <Button class="m-1 p-1 rounded-circle" Type="ButtonType.Button" Color="ButtonColor.Success" Position="Position.Relative" @onclick="() => GameContext?.Draw()">
                                +1
                            </Button>
                        }
                        @if (GameContext.DeckCount >= 2)
                        {
                            <Button class="m-1 p-1 rounded-circle" Type="ButtonType.Button" Color="ButtonColor.Success" Position="Position.Relative" @onclick="() => GameContext?.Draw(2)">
                                +2
                            </Button>
                        }
                        @if (GameContext.DeckCount >= 4)
                        {
                            <Button class="m-1 p-1 rounded-circle" Type="ButtonType.Button" Color="ButtonColor.Success" Position="Position.Relative" @onclick="() => GameContext?.Draw(4)">
                                +4
                            </Button>
                        }
                    }
                </div>
            </div>
        </div>
        <div class="me-1 mb-1 d-flex flex-column rounded">
            <h3 class="p-2 rounded text-bg-secondary">In play (<span>@GameContext.InPlayCount</span>)</h3>
            <div class="d-flex flex-row flex-wrap rounded">
                @foreach (var card in GameContext.InPlay)
                {
                    <div class="me-1 mb-1 position-relative to-hover" id="deck">
                        <GameCard CardContext="@card" />
                        <div class="m-0 p-0 position-absolute top-50 start-50 translate-middle to-show">
                            <Button class="m-1 p-1 rounded-circle" Type="ButtonType.Button" Color="ButtonColor.Secondary" Position="Position.Relative" @onclick="() => card.RotateRight()">
                                ⇒
                            </Button>
                            <Button class="m-1 p-1 rounded-circle" Type="ButtonType.Button" Color="ButtonColor.Secondary" Position="Position.Relative" @onclick="() => card.RotateDown()">
                                ⇓
                            </Button>
                            <Button class="m-1 p-1 rounded-circle" Type="ButtonType.Button" Color="ButtonColor.Warning" Position="Position.Relative" @onclick="() => GameContext?.Discard(card)">
                                ✓
                            </Button>
                            <Button class="m-1 p-1 rounded-circle" Type="ButtonType.Button" Color="ButtonColor.Danger" Position="Position.Relative" @onclick="() => GameContext?.Trash(card)">
                                x
                            </Button>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="me-1 mb-1 d-flex flex-column rounded">
            <h3 class="p-2 rounded text-bg-success">Hand (<span>@GameContext.HandCount</span>)</h3>
            <div class="d-flex flex-row flex-wrap rounded">
                @foreach (var card in GameContext.Hand)
                {
                    <div class="me-1 mb-1 position-relative to-hover" id="deck">
                        <GameCard CardContext="@card" />
                        <div class="m-0 p-0 position-absolute top-50 start-50 translate-middle to-show">
                            <Button class="m-1 p-1 rounded-circle" Type="ButtonType.Button" Color="ButtonColor.Secondary" Position="Position.Relative" @onclick="() => GameContext?.Play(card)">
                                ∞
                            </Button>
                            <Button class="m-1 p-1 rounded-circle" Type="ButtonType.Button" Color="ButtonColor.Success" Position="Position.Relative" @onclick="() => card.RotateRight()">
                                ⇒
                            </Button>
                            <Button class="m-1 p-1 rounded-circle" Type="ButtonType.Button" Color="ButtonColor.Success" Position="Position.Relative" @onclick="() => card.RotateDown()">
                                ⇓
                            </Button>
                            <Button class="m-1 p-1 rounded-circle" Type="ButtonType.Button" Color="ButtonColor.Warning" Position="Position.Relative" @onclick="() => GameContext?.Discard(card)">
                                ✓
                            </Button>
                            <Button class="m-1 p-1 rounded-circle" Type="ButtonType.Button" Color="ButtonColor.Danger" Position="Position.Relative" @onclick="() => GameContext?.Trash(card)">
                                x
                            </Button>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="me-1 mb-1 d-flex flex-column rounded">
            <h3 class="p-2 rounded text-bg-warning">Discard (<span>@GameContext.DiscardedCount</span>)</h3>
            <div class="position-relative to-hover" id="discarded">
                <GameCard CardContext="@GameContext.DiscardedLast" />
                <div class="w-100 h-100 position-absolute top-0 start-0" style="background-color: #404040A0;"></div>
                <div class="m-0 p-0 position-absolute top-50 start-50 translate-middle to-show">
                    @if (GameContext.DiscardedCount > 0)
                    {
                        <Button class="m-1 p-1 rounded-circle" Type="ButtonType.Button" Color="ButtonColor.Success" Position="Position.Relative" @onclick="() => GameContext?.UndoDiscard()">
                            ↺
                        </Button>
                    }
                </div>
            </div>
        </div>
        <div class="me-1 mb-1 d-flex flex-column rounded">
            <h3 class="p-2 rounded text-bg-danger">Trash (<span>@GameContext.TrashCount</span>)</h3>
            <div class="position-relative to-hover" id="trashed">
                <GameCard CardContext="@GameContext.TrashedLast" />
                <div class="w-100 h-100 position-absolute top-0 start-0" style="background-color: #404040A0;"></div>
                <div class="m-0 p-0 position-absolute top-50 start-50 translate-middle to-show">
                    @if (GameContext.TrashCount > 0)
                    {
                        <Button class="m-1 p-1 rounded-circle" Type="ButtonType.Button" Color="ButtonColor.Success" Position="Position.Relative" @onclick="() => GameContext?.UndoTrash()">
                            ↺
                        </Button>
                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <lead>What do you want to do?</lead>

    <div class="d-flex flex-column mb-3">
        <Button class="m-2" Type="ButtonType.Button" Color="ButtonColor.Primary">
            <InputFile title="Load game" OnChange="LoadGame" />
        </Button>
        <Button class="m-2" Type="ButtonType.Link" Color="ButtonColor.Primary" @onclick=NewGame>New game</Button>
    </div>
}

@code {
    private void LoadGame(InputFileChangeEventArgs args)
    {
        using var stream = args.File.OpenReadStream();
        using var reader = new StreamReader(stream);

        GameContext.Load(Read(reader));
    }

    private IEnumerable<string> Read(StreamReader reader)
    {
        while (reader.Peek() >= 0)
        {
            var line = reader.ReadLine();
            if (line != null)
                yield return line;
        }
    }

    private void NewGame(MouseEventArgs args) =>
        GameContext.Initialize(Expansions.FeudalKingdom);
}