@page "/"
@inject Game GameContext

<PageTitle>Kingdom Legacy</PageTitle>

@if (GameContext.IsInitialized)
{
    <div class="d-flex flex-row flex-wrap">
        <div class="d-flex flex-column">
            <div class="pe-1">
                <div class="p-2 w-100 d-flex flex-row justify-content-between rounded-ts rounded-te text-bg-dark" style="height: 50px;">
                    <h3 class="mb-1 p-2 rounded text-bg-dark">Box (@(GameContext.BoxCount))</h3>
                </div>
            </div>
            <div class="me-1 mb-1 position-relative">
                <div class="game-card d-flex flex-column">
                    @foreach (var action in GameContext.Actions.GetBoxActions())
                    {
                        <ActionButton Class="my-1 p-1" Action="@action" />
                    }
                    <div class="d-flex d-row">
                        <NumberInput Class="me-1 w-50" TValue="int" @bind-Value="@_boxCardId" />
                        @foreach (var action in GameContext.Actions.GetBoxSpecialActions(_boxCardId))
                        {
                            <ActionButton Class="my-1 p-1 w-50" Action="@action" />
                        }
                    </div>
                </div>
            </div>
        </div>
        <Cards Name="Discover" GameContext="@GameContext" Values="@GameContext.Discovered" BackgroundColor="text-bg-info" />
        <Cards Name="Deck" GameContext="@GameContext" Values="@GameContext.Deck" BackgroundColor="text-bg-primary" IsCollapsed="true" Disabled="@(GameContext.DiscoveredCount > 0)" EmptyActions="@GameContext.Actions.GetDeckActions()" />
        <Cards Name="Permanent" GameContext="@GameContext" Values="@GameContext.Permanent" BackgroundColor="text-bg-light" />
        <Cards Name="In play" GameContext="@GameContext" Values="@GameContext.InPlay" BackgroundColor="text-bg-secondary" Disabled="@(GameContext.DiscoveredCount > 0)" />
        <Cards Name="Hand" GameContext="@GameContext" Values="@GameContext.Hand" BackgroundColor="text-bg-success" Disabled="@(GameContext.DiscoveredCount > 0)" />
        <Cards Name="Discard" GameContext="@GameContext" Values="@GameContext.Discarded" BackgroundColor="text-bg-warning" IsCollapsed="true" Disabled="@(GameContext.DiscoveredCount > 0)" />
        <Cards Name="Trash" GameContext="@GameContext" Values="@GameContext.Trashed" BackgroundColor="text-bg-danger" IsCollapsed="true" Disabled="@(GameContext.DiscoveredCount > 0)" />
    </div>
    <ul class="list-group">
        @foreach (var action in GameContext.Actions.History.Reverse().Where(action => action.Description != null).Take(25))
        {
            <li class="list-group-item">@action.Description</li>
        }
    </ul>
}
else
{
    <div class="mx-auto px-8" style="width: 1296px;">
        @if (_newKingdomForm == null)
        {
            <lead>What do you want to do?</lead>

            <div class="d-flex flex-column mb-3">
                <InputFile class="m-2 btn btn-primary" title="Load game" OnChange="LoadGame" accept=".save" />
                <Button Class="m-2" Type="ButtonType.Link" Color="ButtonColor.Primary" @onclick=NewGame>New game</Button>
            </div>
        }
        else
        {
            <lead>Name your kingdom</lead>

            <EditForm class="d-flex flex-column mb-3" Model="@_newKingdomForm" OnValidSubmit="StartGame">
                <TextInput Class="m-2 w-auto" @bind-Value="@_newKingdomForm.Name" Placeholder="Kingdom name" @ref="_input" />
                <Button Class="m-2" Type="ButtonType.Submit" Color="ButtonColor.Primary">Start</Button>
            </EditForm>
        }
        <Readme />
    </div>
}

@code {
    private int _boxCardId;
    private bool _showDeck;
    private bool _showTrashed;

    private NewKingdomForm? _newKingdomForm;
    public class NewKingdomForm
    {
        public string? Name { get; set; }
    }

    private TextInput? _input;

    protected override void OnInitialized()
    {
        GameContext.Subscribe(_ => StateHasChanged());
        base.OnInitialized();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!GameContext.IsInitialized && _newKingdomForm != null && _input?.Element != null)
            await _input.Element.FocusAsync();
    }

    private async Task LoadGame(InputFileChangeEventArgs args)
    {
        MemoryStream stream = new MemoryStream();
        await args.File.OpenReadStream().CopyToAsync(stream);
        var bytes = stream.ToArray();
        var data = Encoding.Default.GetString(bytes);
        GameContext.Load(data);
    }

    private void NewGame(MouseEventArgs args) =>
        _newKingdomForm = new NewKingdomForm();

    private void StartGame(EditContext args) =>
        GameContext.Initialize(_newKingdomForm?.Name, Expansions.FeudalKingdom);
}