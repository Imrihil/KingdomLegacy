<div class="me-1 mb-1 position-relative to-hover">
    @if (CardContext != null)
    {
        <div class="@(CardContext.Orientation.IsRotated() ? "rotate-180" : "")">
            <Image Src="@("cards/" + CardContext.Path)" Alt="@CardContext.Id.ToString()" Class="game-card" />
            @foreach (var (sticker, type) in Stickers)
            {
                @if (type != null)
                {
                    <Image Src="@($"icons/{type.Name}.png")"
                           Alt="@type.Name"
                           Class="@($"position-absolute sticker{(sticker.IsRotated ? " rotate-180" : "")}")"
                           Style="@($"left: {Math.Abs(sticker.X)}px; top: {Math.Abs(sticker.Y)}px; width: {type.Width}px; height: {type.Height}px;")" />
                }
            }
        </div>
    }
    else
    {
        <div class="text-center pt-4 game-card">Empty</div>
    }
    @if (!string.IsNullOrEmpty(BackgroundColor))
    {
        <div class="w-100 h-100 position-absolute top-0 start-0 game-card opacity-50 @BackgroundColor" />
    }
    @if (!Disabled)
    {
        <div class="to-show">
            <div class="w-100 m-0 p-0 d-flex flex-row flex-wrap justify-content-center position-absolute top-50 start-50 translate-middle">
                <Button Class="m-1 p-1 rounded-circle btn-card" Type="ButtonType.Button" Color="ButtonColor.Dark" Position="Position.Relative" @onclick="ModifyStickers">
                    +
                </Button>
                @foreach (var action in Actions ?? CardActions)
                {
                    <ActionButton Class="m-1 p-1 rounded-circle btn-card" Position="Position.Relative" Action="@action" />
                }
            </div>
        </div>
    }
</div>

@if (CardContext != null)
{
    <Modal @ref="_modal" Title="Choose sticker" @onmouseleave="OnMouseLeave">
        <BodyTemplate>
            <div class="d-flex flex-row flex-wrap justify-content-center">
                <Button Color="ButtonColor.Danger" Active="@(_stickerType == null)" @onclick="() => SetType(null)">
                    Remove
                </Button>
                @foreach (var type in StickerTypeExtensions.AllDetails)
                {
                    <Button Color="ButtonColor.Success" Active="@(_stickerType == type)" @onclick="() => SetType(type)">
                        <Image Src="@($"icons/{type.Name}.png")"
                               Alt="@type.Name"
                               Class="sticker"
                               Style="@($"width: {type.Width}px; height: {type.Height}px;")" />
                    </Button>
                }
            </div>
        </BodyTemplate>
        <FooterTemplate>
            <div class="@($"mx-auto position-relative{(CardContext.Orientation.IsRotated() ? " rotate-180" : "")}")" @onmousemove="SetSticker" @onclick="OnClick">
                <Image Src="@("cards/" + CardContext.Path)" Alt="@CardContext.Id.ToString()" Class="game-card" />
                @foreach (var (sticker, type) in Stickers)
                {
                    @if (type != null)
                    {
                        <Image Src="@($"icons/{type.Name}.png")"
                               Alt="@type.Name"
                               Class="@($"position-absolute sticker{(sticker.IsRotated ? " rotate-180" : "")}")"
                               Style="@($"left: {Math.Abs(sticker.X)}px; top: {Math.Abs(sticker.Y)}px; width: {type.Width}px; height: {type.Height}px;")"
                               @onclick="() => Remove(sticker)" />
                    }
                }
                @if (_stickerType != null)
                {
                    <div class="w-100 h-100 position-absolute top-0 start-0 game-card opacity-100" />
                }
            </div>

        </FooterTemplate>
    </Modal>
}

@code {
    [Parameter]
    public Domain.Game? GameContext { get; set; }

    [Parameter]
    public Domain.Card? CardContext { get; set; }

    [Parameter]
    public string? BackgroundColor { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public IAction[]? Actions { get; set; }

    private IAction[] CardActions => CardContext == null ? [] : GameContext?.Actions.GetCardActions(CardContext) ?? [];
    private IEnumerable<(Sticker, StickerTypeDetails?)> Stickers
    {
        get
        {
            var stickers = CardContext?.Stickers.Where(sticker => sticker.IsFlipped == CardContext.Orientation.IsFlipped()).ToArray() ?? [];
            return stickers.Zip(stickers.Select(s => s.Type.GetDetails()));
        }
    }

    private Modal _modal = default!;
    private StickerTypeDetails? _stickerType;
    private Sticker? _sticker;

    private async Task ModifyStickers(MouseEventArgs args) =>
        await _modal.ShowAsync();

    private void SetType(StickerTypeDetails? type)
    {
        _stickerType = type;

        if (CardContext == null || _sticker == null)
            return;

        CardContext.RemoveSticker(_sticker);
        _sticker = null;
    }

    private void SetSticker(MouseEventArgs args)
    {
        if (CardContext == null || _stickerType == null)
            return;

        Console.WriteLine($"type: {_stickerType.Type}, sticker: {_sticker?.Type}, index: {(_sticker != null ? CardContext.Stickers.IndexOf(_sticker) : "")}");

        if (_sticker == null)
            _sticker = CardContext.AddSticker(_stickerType.Type, (int)args.OffsetX, (int)args.OffsetY);
        else
            _sticker.Set(CardContext, (int)args.OffsetX, (int)args.OffsetY);
    }

    private void OnMouseLeave(MouseEventArgs args)
    {
        if (CardContext == null || _sticker == null)
            return;

        CardContext.RemoveSticker(_sticker);
        _sticker = null;
    }

    private void Remove(Sticker sticker)
    {
        if (CardContext == null || sticker == null || _sticker != null)
            return;

        CardContext.RemoveSticker(sticker);
    }

    private async Task OnClick(MouseEventArgs args)
    {
        _stickerType = null;
        _sticker = null;
        await _modal.HideAsync();
    }
}
